Test Driven Development

Run Npm Test, no need to run server.

fix nested git folder 

git rm --cached client_folder

Jest Commands 

Npm Test Script 

Watch Mode watches for changes by default since last commit

a - all tests 

0 - recently changed tests

Jest is configured to look for by default files with .test.js

Enzyme

Search through Dom

Simulate Events

Shallow Rendering One Level Deep Parent renders but Children will have placeholders

Mount Render Parent and Children

Can access props and state

Installation 

npm install --save-dev enzyme jest-enzyme enzyme-adapter-react-16


Types of test 

Unit tests

    Test one peice of code one function isolated

Integration Tests 

    multiple units work together


Acceptance / End to End testing

    User interactions

Server Testeing with Jest

Or selenium 


Testing Trade Offs 

Easy to maintain 

Test behaviour instead of implementation 

Snap Shots

Brittle

Freeze component in a speciific state

Install React 17 and Adaptor 

https://stackoverflow.com/questions/64658031/which-enzyme-adapter-works-with-react-17

// Remove properties for testing
npm install --save-dev babel-plugin-react-remove-properties

// Edit Babel

// delete data attributes 
npm Run eject

  "env": {
    "production": {
      "plugins": [
        ["react-remove-properties", {"properties": ["data-test", "data-foo", /my-suffix-expression$/]}]
      ]
    }
  }

  // create production build
  // Data-test attributes are gone


  // Good reference for describe vs it vs test   
  https://stackoverflow.com/questions/32055287/what-is-the-difference-between-describe-and-it-in-jest 

  Facebook Proptypes
  
  yarn add prop-types

  When you don't create react app you have to write a setup test for config

jest.config.js 

setupFilesAfterEnv: ['<rootDir>/src/setupTests.js']

Mocks 

Replace Functions
Keep real Function from running 

  Prevent side effects like network calls

Spy on function to see whats called

Provide return values

  Conditions

Do not destructure context 

moxios intercepts http requests for tets

// do different things to update a single key

[state, dispatch] = React.useReducer(reducer, initialState)
dispatch function updates state

dispact(action) -> reducer(state, action)
conventionally, action is object with two properties type and payload
switch on type 

// clear functions 
dont have to pass state as an argument explicitly

Do not destructure Hooks in your code otherwise not picked up in testing

// Context test plan

Option 1 

Mock useContext 

mock return value sets language value

Pros

isolated unit test 

can use shallow to avoid testing children we only care about Parent

Cons 

multiple use contexts are dangerous

you can only mock use Context once 

specify order of values 

not relevant for custom hook / internal state pattern



Option 2 

Wrap Component in Provider in setup function 

set language with value prop

Pros

closer to actual app 

extra functionality Provider unlikely to functionality

Cons 

need to use mount 

shallow just returns Provider
tests depend on children of component under test

React Testing Library Notes

Not just a library, also a philosophy "opinionated"

test your software the way users actually use it  

  no internal implementation 

Find elements by accessibility markers no test Ids

  the idea is that accessibility markers are readable by screen readers

  React Testing Library provides virtual dom for tests 

  Jest test runner that finds tests runs tests determines whether tests pass or fail 

  Create React app

  npm package 

  Configures with 

  configuration 
  webpack and babel 
  web server 
  testing library 

  Render 

  creates virtual dom 

  screen allows us to access dom

  Jest Dom 

  comes with create react app

  src/setup imports it before each test and makes matchers available

  Dom based matchers usually include to be


react  testing library helps with:

helps rendering components into the virtual dom 

searching the virtual dom 

interacting with the virtual dom

jest is recommended by testing library 

comes with react create app 

jest is a test runner


Jest Global test method 

- string description 
- test function fails if error is thrown 

  assertions throw errors

Test Driven Development 

  write test before code

  then write code according to spec set by tests

  red green testing 

  test fails before code is written 

  Re run tests for free  

  Testing Library recommends using Queries accessible to everyone

  Roles are intertwined with screen readers












