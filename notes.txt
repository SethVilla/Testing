Test Driven Development

Run Npm Test, no need to run server.

fix nested git folder 

git rm --cached client_folder

Jest Commands 

Npm Test Script 

Watch Mode watches for changes by default since last commit

a - all tests 

0 - recently changed tests

Jest is configured to look for by default files with .test.js

Enzyme

Search through Dom

Simulate Events

Shallow Rendering One Level Deep Parent renders but Children will have placeholders

Mount Render Parent and Children

Can access props and state

Installation 

npm install --save-dev enzyme jest-enzyme enzyme-adapter-react-16


Types of test 

Unit tests

    Test one peice of code one function isolated

Integration Tests 

    multiple units work together


Acceptance / End to End testing

    User interactions

Server Testeing with Jest

Or selenium 


Testing Trade Offs 

Easy to maintain 

Test behaviour instead of implementation 

Snap Shots

Brittle

Freeze component in a speciific state

Install React 17 and Adaptor 

https://stackoverflow.com/questions/64658031/which-enzyme-adapter-works-with-react-17

// Remove properties for testing
npm install --save-dev babel-plugin-react-remove-properties

// Edit Babel

// delete data attributes 
npm Run eject

  "env": {
    "production": {
      "plugins": [
        ["react-remove-properties", {"properties": ["data-test", "data-foo", /my-suffix-expression$/]}]
      ]
    }
  }

  // create production build
  // Data-test attributes are gone


  // Good reference for describe vs it vs test   
  https://stackoverflow.com/questions/32055287/what-is-the-difference-between-describe-and-it-in-jest 

  Facebook Proptypes
  
  yarn add prop-types

  When you don't create react app you have to write a setup test for config

jest.config.js 

setupFilesAfterEnv: ['<rootDir>/src/setupTests.js']

Mocks 

Replace Functions
Keep real Function from running 

  Prevent side effects like network calls

Spy on function to see whats called

Provide return values

  Conditions

Do not destructure context 

moxios intercepts http requests for tets

// do different things to update a single key

[state, dispatch] = React.useReducer(reducer, initialState)
dispatch function updates state

dispact(action) -> reducer(state, action)
conventionally, action is object with two properties type and payload
switch on type 

// clear functions 
dont have to pass state as an argument explicitly

Do not destructure Hooks in your code otherwise not picked up in testing



